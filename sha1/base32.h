#ifndef BASE32_H
#define BASE32_H

#include <string_view>
#include "byte_stream.h"
#include <iosfwd>

namespace util
{
	std::string to_base32(const byte_sequence& bytes);
	std::string to_padded_base32(const byte_sequence& bytes);

	// if the size of the result sequence is known and passed,
	// we can correctly take care of the non-multiple of fibe bytes
	byte_sequence from_base32( std::string_view str, std::size_t sz = -1 );

	// size is not passed; must be a padded base32 string
	byte_sequence from_padded_base32(std::string_view str);

	struct base32_data
	{
		base32_data(std::size_t n, std::string str)
			: nbytes(n), b32_str(std::move(str)) {}

		// a string like the one generated by to_string()
		explicit base32_data(const std::string& length_prefixed_str);

		std::size_t nbytes;
		std::string b32_str;

		// return string consisting of nnnnn : b32_str
		// where nnnnn is the string value of nvytes
		std::string to_string() const;
	};

	base32_data to_base32_data(const byte_sequence& bytes);

	inline byte_sequence from_base32_data( const base32_data& bdata ) 
	{
		return from_base32( bdata.b32_str, bdata.nbytes ); 
	}
}

#endif // BASE32_H